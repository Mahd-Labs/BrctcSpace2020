@page "/experiment2020"
@using BrctcSpace;
@using Utilities;
@using BrctcSpaceLibrary.DataModels;
@using BlazorWebSpaceTool.Components;
@using System.Threading;
@using System.Text.Json;
@inject Vibe.VibeClient vibeClient;
@inject Microsoft.JSInterop.IJSRuntime JS;

<h2>Experiment2020</h2>

<div style="margin-bottom: 10px;">



</div>

<div class="subgrid">
    <div class="subgrid-left">

        <div class="btn-group">
            <button class="@singleClass" @onclick="ActivateSingle">Single</button>
            <button class="@streamClass" @onclick="ActivateStream">Stream</button>
            <button class="@bulkClass" @onclick="ActivateBulk">Bulk</button>
        </div>

        <br />

        <button @onclick="SaveResultsToJson" disabled="@(Results == null || Results.Count <= 0)" class="btn btn-info">Save To Json</button>
        <button @onclick="SaveResultsToCsv" disabled="@(Results == null || Results.Count <= 0)" class="btn btn-info">Save To CSV</button>
    </div>
    <div class="subgrid-center">
        <h5>@resultTile</h5>
        <br />

        <button disabled="@isRunning" @onclick="GetResults" class="btn btn-primary">Get Data</button>
        <button disabled="@(!isRunning)" hidden="@(!resultQueryType.Equals(ResultQueryType.Stream))" @onclick="Cancel" class="btn btn-primary btn-sm">Cancel Stream</button>

        <br />
        <p>Rows: @Results.Count</p>

        <GenericListTable Items="Results">
            <TableHeader>
                <th>Raw Accelerometer</th>
                <th>Accelerometer</th>
                <th>Raw Gyroscope</th>
                <th>Gyroscope</th>
                <th>Cpu Temp</th>
                <th>Transaction Timestamp</th>
            </TableHeader>
            <RowTemplate>
                <td>@(context.AccelData_Raw != null ? string.Join(',', context.AccelData_Raw) : "None")</td>
                <td>@(context.AccelData != null ? string.Join(',', context.AccelData) : "None")</td>
                <td>@(context.GyroData_Raw != null ? string.Join(',', context.GyroData_Raw) : "None")</td>
                <td>@(context.GyroData != null ? string.Join(',', context.GyroData) : "None")</td>
                <td>@context.CpuTemp</td>
                <td>@context.TransactionTime</td>
            </RowTemplate>
        </GenericListTable>
    </div>

    <div class="subgrid-footer container-fluid p-3 my-3 bg-dark text-white">
        <h4 style="margin-bottom:10px;">Device Details</h4>
        <div class="card bg-secondary" style="max-width: 12%;margin-right:10px; float:left">
            <button @onclick="GetStatus" class="btn btn-sm btn-info">Verify Gyroscope Connection Status</button>
            <br />
            <div>
                @GyroStatus
            </div>
        </div>

        @*<div class="card bg-secondary" style="max-width: 12%;margin:auto; float:left">
                Second card for more health checks
            </div>*@
    </div>

</div>


@code {

    public List<Vibe2020DataModel> Results { get; set; } = new List<Vibe2020DataModel>();

    //Used to disable all buttons when streaming data. Not technically necessary, but better safe than sorry.
    public bool isRunning { get; set; } = false;

    public RenderFragment GyroStatus { get; set; }

    private CancellationTokenSource CancellationToken { get; set; }

    private const string subButton = "btn btn-primary";
    private const string subActiveButton = "active btn btn-primary";

    private string singleClass = subActiveButton;
    private string streamClass = subButton;
    private string bulkClass = subButton;

    private const string singleTitle = "Get Single Results";
    private const string streamTitle = "Get Stream Results";
    private const string bulkTitle = "Get Bulk Results";

    private string resultTile = singleTitle;
    private ResultQueryType resultQueryType = ResultQueryType.Single;

    protected override Task OnInitializedAsync()
    {
        //Create token before it's called
        CancellationToken = new CancellationTokenSource();
        CancellationToken.Token.Register(Cancel);
        return base.OnInitializedAsync();
    }

    public async void GetResults()
    {
        if (!isRunning)
        {
            //setup the request once for brevity. 
            var request = new DeviceDataRequest();

            switch (resultQueryType)
            {
                case ResultQueryType.Single:
                    var result = await vibeClient.GetSingleDeviceDataAsync(request);

                    Results.Add(Utilities.ConvertToDataModel(result));
                    break;
                case ResultQueryType.Stream:
                    //Prevent multiple attempts
                    isRunning = true;
                    try
                    {
                        using (var call = vibeClient.StreamDeviceData(
                        request,
                        cancellationToken: CancellationToken.Token))
                        {
                            try
                            {
                                if (CancellationToken.IsCancellationRequested)
                                    CancellationToken.Token.ThrowIfCancellationRequested();
                                while (await call.ResponseStream.MoveNext(CancellationToken.Token))
                                {
                                    Results.Add(Utilities.ConvertToDataModel(call.ResponseStream.Current));
                                    StateHasChanged();
                                }
                            }
                            catch
                            {

                            }

                        }
                    }
                    finally
                    {
                        isRunning = false;
                    }
                    break;
                case ResultQueryType.Bulk:
                    isRunning = true;
                    request.DataIterations = 1000;
                    var data = await vibeClient.GetBulkDeviceDataAsync(request);

                    Results.AddRange(Utilities.ConvertToDataModel(data.Items.ToList()));
                    isRunning = false;
                    break;
                default:
                    break;
            }

            StateHasChanged();
        }
    }

    public void ActivateSingle()
    {
        resultQueryType = ResultQueryType.Single;
        resultTile = singleTitle;
        singleClass = subActiveButton;
        streamClass = subButton;
        bulkClass = subButton;
        StateHasChanged();
    }

    public void ActivateStream()
    {
        resultQueryType = ResultQueryType.Stream;
        resultTile = streamTitle;
        singleClass = subButton;
        streamClass = subActiveButton;
        bulkClass = subButton;
        StateHasChanged();
    }

    public void ActivateBulk()
    {
        resultQueryType = ResultQueryType.Bulk;
        resultTile = bulkTitle;
        singleClass = subButton;
        streamClass = subButton;
        bulkClass = subActiveButton;
        StateHasChanged();
    }

    public void Cancel()
    {
        isRunning = false;
        CancellationToken.Cancel();
        CancellationToken = new CancellationTokenSource();
        CancellationToken.Token.Register(Cancel);
        StateHasChanged();
    }

    public void SaveResultsToJson()
    {
        Utilities.SaveToJson(Results, this.JS, "SingleResults");
    }

    public void SaveResultsToCsv()
    {
        Utilities.SaveToCsv(Results, this.JS, "SingleResults");
    }

    public async void GetStatus()
    {
        var result = await vibeClient.GetDeviceStatusAsync(new DeviceStatusRequest());

        if (result.GyroStatus)
            GyroStatus =@<p class="bg-success card-text text-center">Gyroscope Valid</p>;
else
GyroStatus = @<p class="bg-danger card-text text-center">Gyroscope Invalid</p>;
StateHasChanged();
}

private enum ResultQueryType { Single, Stream, Bulk }


}
