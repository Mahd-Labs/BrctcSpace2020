@page "/experiment2020"
@using BrctcSpace;
@using Utilities;
@using BrctcSpaceLibrary.DataModels;
@using BlazorWebSpaceTool.Components;
@using System.Threading;
@using System.Text.Json;
@inject Vibe.VibeClient vibeClient;
@inject Microsoft.JSInterop.IJSRuntime JS;

<h2>Experiment2020</h2>

<div style="margin-bottom: 10px;">



</div>

<div class="results">
    <div class="results-left">
        <h5>Single data point testing</h5>
        <br />
        <button disabled="@isRunning" @onclick="GetResult" class="btn btn-primary">Get Data</button>

        <button @onclick="SaveSingleToJson" class="btn btn-info">Save To Json</button>
        <button @onclick="SaveSingleToCsv" class="btn btn-info">Save To CSV</button>

        <br />
        <p>Rows: @SingleResults.Count</p>

        <GenericListTable Items="SingleResults">
            <TableHeader>
                <th>Accelerometer</th>
                <th>Raw Gyroscope</th>
                <th>Gyroscope</th>
                <th>Cpu Temp</th>
                <th>Transaction Timestamp</th>
            </TableHeader>
            <RowTemplate>
                <td>@(context.AccelData != null ? string.Join(',', context.AccelData) : "None")</td>
                <td>@(context.GyroData_Raw != null ? string.Join(',', context.GyroData_Raw) : "None")</td>
                <td>@(context.GyroData != null ? string.Join(',', context.GyroData) : "None")</td>
                <td>@context.CpuTemp</td>
                <td>@context.TransactionTime</td>
            </RowTemplate>
        </GenericListTable>
    </div>

    <div class="results-center">
        <h5>Service call data block testing</h5>
        <br />
        <button disabled="@isRunning" @onclick="GetBulkResults" class="btn btn-primary">Gather all Async Data</button>

        <button @onclick="SaveBulkToJson" class="btn btn-info">Save To Json</button>
        <button @onclick="SaveBulkToCsv" class="btn btn-info">Save To CSV</button>

        <br />
        <p>Rows: @BulkResults.Count</p>

        <GenericListTable Items="BulkResults">
            <TableHeader>
                <th>Accelerometer</th>
                <th>Raw Gyroscope</th>
                <th>Gyroscope</th>
                <th>Cpu Temp</th>
                <th>Transaction Timestamp</th>
            </TableHeader>
            <RowTemplate>
                <td>@(context.AccelData != null ? string.Join(',', context.AccelData) : "None")</td>
                <td>@(context.GyroData_Raw != null ? string.Join(',', context.GyroData_Raw) : "None")</td>
                <td>@(context.GyroData != null ? string.Join(',', context.GyroData) : "None")</td>
                <td>@(context.CpuTemp)</td>
                <td>@context.TransactionTime</td>
            </RowTemplate>
        </GenericListTable>
    </div>

    <div class="results-right">
        <h5>Data stream testing</h5>
        <br />
        <button disabled="@isRunning" @onclick="GetStreamResults" class="btn btn-primary btn-sm">Stream Data</button>
        <button disabled="@(!isRunning)" @onclick="Cancel" class="btn btn-primary btn-sm">Cancel Stream</button>

        <button @onclick="SaveStreamToJson" class=" btn btn-info">Save To Json</button>
        <button @onclick="SaveStreamToCsv" class="btn btn-info">Save To CSV</button>

        <br />
        <p>Rows: @StreamResults.Count</p>

        <GenericListTable Items="StreamResults">
            <TableHeader>
                <th>Accelerometer</th>
                <th>Raw Gyroscope</th>
                <th>Gyroscope</th>
                <th>Cpu Temp</th>
                <th>Transaction Timestamp</th>
            </TableHeader>
            <RowTemplate>
                <td>@(context.AccelData != null ? string.Join(',', context.AccelData) : "None")</td>
                <td>@(context.GyroData_Raw != null ? string.Join(',', context.GyroData_Raw) : "None")</td>
                <td>@(context.GyroData != null ? string.Join(',', context.GyroData) : "None")</td>
                <td>@context.CpuTemp</td>
                <td>@context.TransactionTime</td>
            </RowTemplate>
        </GenericListTable>
    </div>

    <div class="results-footer container-fluid p-3 my-3 bg-dark text-white">
        <h4 style="margin-bottom:10px;">Device Details</h4>
        <div class="card bg-secondary" style="max-width: 12%;margin-right:10px; float:left">
            <button @onclick="GetStatus" class="btn btn-sm btn-info">Verify Gyroscope Connection Status</button>
            <br />
            <div>
                @GyroStatus
            </div>
        </div>

        @*<div class="card bg-secondary" style="max-width: 12%;margin:auto; float:left">
            Second card for more health checks
        </div>*@
    </div>

</div>


@code {

    public List<Vibe2020DataModel> SingleResults { get; set; } = new List<Vibe2020DataModel>();
    public List<Vibe2020DataModel> StreamResults { get; set; } = new List<Vibe2020DataModel>();
    public List<Vibe2020DataModel> BulkResults { get; set; } = new List<Vibe2020DataModel>();

    //Used to disable all buttons when streaming data. Not technically necessary, but better safe than sorry.
    public bool isRunning { get; set; } = false;

    public RenderFragment GyroStatus { get; set; }

    private CancellationTokenSource CancellationToken { get; set; }

    protected override Task OnInitializedAsync()
    {
        CancellationToken = new CancellationTokenSource();
        CancellationToken.Token.Register(Cancel);
        return base.OnInitializedAsync();
    }

    public async void GetStreamResults()
    {
        if (!isRunning)
        {
            //Prevent multiple attempts
            isRunning = true;
            try
            {
                using (var call = vibeClient.StreamDeviceData(
            new DeviceDataRequest(),
            cancellationToken: CancellationToken.Token))
                {
                    try
                    {
                        if (CancellationToken.IsCancellationRequested)
                            CancellationToken.Token.ThrowIfCancellationRequested();
                        while (await call.ResponseStream.MoveNext(CancellationToken.Token))
                        {
                            StreamResults.Add(Utilities.ConvertToDataModel(call.ResponseStream.Current));
                            StateHasChanged();
                        }
                    }
                    catch
                    {

                    }

                }
            }
            finally
            {
                isRunning = false;
                StateHasChanged();
            }
        }
    }

    public async void GetResult()
    {
        if (!isRunning)
        {
            var result = await vibeClient.GetSingleDeviceDataAsync(new DeviceDataRequest());

            SingleResults.Add(Utilities.ConvertToDataModel(result));

            //Update the state when result is received
            StateHasChanged();
        }
    }

    public async void GetBulkResults()
    {
        if (!isRunning)
        {
            isRunning = true;
            StateHasChanged();
            var data = await vibeClient.GetBulkDeviceDataAsync(new DeviceDataRequest() { DataIterations = 1000 });

            BulkResults = Utilities.ConvertToDataModel(data.Items.ToList());
            isRunning = false;
            StateHasChanged();
        }
    }

    public void Cancel()
    {
        isRunning = false;
        CancellationToken.Cancel();
        CancellationToken = new CancellationTokenSource();
        CancellationToken.Token.Register(Cancel);
        StateHasChanged();
    }

    public void SaveSingleToJson()
    {
        Utilities.SaveToJson(SingleResults, this.JS, "SingleResults");
    }

    public void SaveBulkToJson()
    {
        Utilities.SaveToJson(BulkResults, this.JS, "ServiceResults");
    }

    public void SaveStreamToJson()
    {
        Utilities.SaveToJson(StreamResults, this.JS, "StreamResults");
    }

    public void SaveSingleToCsv()
    {
        Utilities.SaveToCsv(SingleResults, this.JS, "SingleResults");
    }

    public void SaveBulkToCsv()
    {
        Utilities.SaveToCsv(BulkResults, this.JS, "ServiceResults");
    }

    public void SaveStreamToCsv()
    {
        Utilities.SaveToCsv(StreamResults, this.JS, "StreamResults");
    }

    public async void GetStatus()
    {
        var result = await vibeClient.GetDeviceStatusAsync(new DeviceStatusRequest());

        if (result.GyroStatus)
            GyroStatus = @<p class="bg-success card-text text-center">Gyroscope Valid</p>;
        else
            GyroStatus = @<p class="bg-danger card-text text-center">Gyroscope Invalid</p>;
        StateHasChanged();
}


}
