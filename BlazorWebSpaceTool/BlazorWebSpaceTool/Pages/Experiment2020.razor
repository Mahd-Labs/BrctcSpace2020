@page "/experiment2020"
@using BrctcSpace;
@using BlazorWebSpaceTool.Components;
@using System.Threading;
@inject Vibe.VibeClient vibeClient;

<h3>Experiment2020</h3>

<div class="results">
    <div class="resultsleft">
        <button disabled="@isRunning" @onclick="GetResult" class="btn btn-primary">Get Data</button>
        <Vibe2020ResultList Items="SingleResults" />
    </div>

    <div class="resultscenter">
        <button disabled="@isRunning" @onclick="GetBulkResults" class="btn btn-primary">Gather all Async Data</button>
        <GenericListTable Items="BulkResults">
            <TableHeader>
                <th>Accelerometer</th>
                <th>Gyroscope</th>
                <th>Cpu Temp</th>
                <th>Transaction Timestamp</th>
            </TableHeader>
            <RowTemplate>
                <td>@(string.Join(',', context.AccelData) ?? "None")</td>
                <td>@(string.Join(',', context.GyroData) ?? "None")</td>
                <td>@context.CpuTemp</td>
                <td>@(new DateTime(context.TransactionTime))</td>
            </RowTemplate>
        </GenericListTable>
    </div>

    <div class="resultsright">
        <button disabled="@isRunning" @onclick="GetStreamResults" class="btn btn-primary btn-sm">Stream Data</button>
        <button disabled="@(!isRunning)" @onclick="Cancel" class="btn btn-primary btn-sm">Cancel Stream</button>
        <Vibe2020ResultList Items="StreamResults" />

    </div>

</div>



@code {

    public List<ResultReply> SingleResults { get; set; } = new List<ResultReply>();
    public List<ResultReply> StreamResults { get; set; } = new List<ResultReply>();
    public List<DeviceDataModel> BulkResults { get; set; } = new List<DeviceDataModel>();

    //Used to disable all buttons when streaming data. Not technically necessary, but better safe than sorry.
    public bool isRunning { get; set; } = false;

    private CancellationTokenSource CancellationToken { get; set; }

    protected override Task OnInitializedAsync()
    {
        CancellationToken = new CancellationTokenSource();
        CancellationToken.Token.Register(Cancel);
        return base.OnInitializedAsync();
    }

    public async void GetStreamResults()
    {
        if (!isRunning)
        {
            //Prevent multiple attempts
            isRunning = true;
            try
            {
                using (var call = vibeClient.GetResultStream(
            new ResultRequest() { ResultType = ResultType.Full, ScaleAccelerometer = false },
            cancellationToken: CancellationToken.Token))
                {
                    try
                    {
                        if (CancellationToken.IsCancellationRequested)
                            CancellationToken.Token.ThrowIfCancellationRequested();
                        while (await call.ResponseStream.MoveNext(CancellationToken.Token))
                        {
                            StreamResults.Add(call.ResponseStream.Current);
                            StateHasChanged();
                        }
                    }
                    catch
                    {

                    }

                }
            }
            finally
            {
                isRunning = false;
                StateHasChanged();
            }
        }
    }

    public async void GetResult()
    {
        if (!isRunning)
        {
            SingleResults.Add(await vibeClient.GetResultSetAsync(
           new ResultRequest() { ResultType = ResultType.Full, ScaleAccelerometer = false }
           ));

            //Update the state when result is received
            StateHasChanged();
        }
    }

    public async void GetBulkResults()
    {
        if (!isRunning)
        {
            var data = await vibeClient.PollVibe2020DataServiceAsync(
            new DeviceDataRequest()
            { UseAccelerometer = true, UseCpuTemperature = true, UseGyroscope = true, UseRtc = true }
            );

            BulkResults = data.Items.ToList();
            StateHasChanged();
        }
    }

    public void Cancel()
    {
        isRunning = false;
        CancellationToken.Cancel();
        CancellationToken = new CancellationTokenSource();
        CancellationToken.Token.Register(Cancel);
        StateHasChanged();
    }

}
